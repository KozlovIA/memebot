import logging
import os
import random
import yaml
import datetime
from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ChatMemberHandler

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
CONFIG = {}
MEMES_FOLDER = ""
ADMINS = set()
ALLOW_USER_ADD = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ–º—ã
MEMES_DAY = {}  # user_id: (filename, date)
MEMES_LIST = []  # —Å–ø–∏—Å–æ–∫ –º–µ–º–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

# --- –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ ---
def load_config(path='config.yaml'):
    global CONFIG, MEMES_FOLDER, ADMINS
    with open(path, 'r', encoding='utf-8') as f:
        CONFIG = yaml.safe_load(f)
    MEMES_FOLDER = CONFIG.get('memes_folder', './memes')
    ADMINS.update(CONFIG.get('admins', []))
    if not os.path.exists(MEMES_FOLDER):
        os.makedirs(MEMES_FOLDER)
    logger.info(f"Config loaded. Memes folder: {MEMES_FOLDER}. Admins: {ADMINS}")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –º–µ–º–æ–≤ ---
def load_memes_list():
    global MEMES_LIST
    MEMES_LIST = [
        f for f in os.listdir(MEMES_FOLDER)
        if os.path.isfile(os.path.join(MEMES_FOLDER, f)) and f.lower().endswith(('.jpg','.jpeg','.png','.gif'))
    ]
    logger.info(f"Loaded {len(MEMES_LIST)} memes.")

# --- –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–µ–º–∞ ---
from collections import deque
import random

MEME_QUEUE = deque()

def get_random_meme():
    global MEME_QUEUE
    if not MEME_QUEUE:
        memes = MEMES_LIST.copy()
        random.shuffle(memes)
        MEME_QUEUE = deque(memes)
    return MEME_QUEUE.popleft()

async def meme_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    count = len(MEMES_LIST)
    await update.message.reply_text(f"–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ {count} –º–µ–º–æ–≤.")

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞ ---
def is_admin(username: str):
    print(username)
    print(ADMINS)
    return username in ADMINS

# --- –°–±—Ä–æ—Å –º–µ–º–æ–≤ –¥–Ω—è (–µ—Å–ª–∏ –¥–∞—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å) ---
def reset_memes_day_if_needed():
    today = datetime.date.today()
    to_delete = []
    for user_id, (fname, dt) in MEMES_DAY.items():
        if dt != today:
            to_delete.append(user_id)
    for user_id in to_delete:
        del MEMES_DAY[user_id]

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–µ–º–æ–≤.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/random_meme - —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º\n"
        "/meme_of_the_day - –º–µ–º –¥–Ω—è\n"
        "–í –ª–∏—á–∫–µ –º–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –º–µ–º, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É.\n"
        #"–ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /lock_mem_add –∏ /unlock_mem_add."
    )

async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–µ–º–æ–≤.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/random_meme - —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º\n"
        "/meme_of_the_day - –º–µ–º –¥–Ω—è\n"
        "–í –ª–∏—á–∫–µ –º–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –º–µ–º, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É.\n"
        "–ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /lock_mem_add –∏ /unlock_mem_add."
    )

async def random_meme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    meme_file = get_random_meme()
    if not meme_file:
        await update.message.reply_text("–ú–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã :(")
        return
    path = os.path.join(MEMES_FOLDER, meme_file)
    await update.message.reply_photo(photo=open(path, 'rb'))

async def meme_of_the_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–º –¥–Ω—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    reset_memes_day_if_needed()
    user_id = update.effective_user.id
    today = datetime.date.today()
    if user_id in MEMES_DAY:
        fname, dt = MEMES_DAY[user_id]
        if dt == today:
            path = os.path.join(MEMES_FOLDER, fname)
            await update.message.reply_photo(photo=open(path, 'rb'))
            return
    # –ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π –º–µ–º
    meme_file = get_random_meme()
    if not meme_file:
        await update.message.reply_text("–ú–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã :(")
        return
    MEMES_DAY[user_id] = (meme_file, today)
    path = os.path.join(MEMES_FOLDER, meme_file)
    await update.message.reply_photo(photo=open(path, 'rb'))

async def add_meme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global ALLOW_USER_ADD
    user = update.effective_user
    chat = update.effective_chat

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–∫–∞
    if chat.type != 'private':
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–º–æ–≤
    if not is_admin(user.username) and not ALLOW_USER_ADD:
        await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–º–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    if not update.message.photo:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–º –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏.")
        return

    photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    file = await photo.get_file()
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è
    ext = os.path.splitext(file.file_path)[1]
    filename = f"{user.id}_{int(datetime.datetime.now().timestamp())}{ext}"
    save_path = os.path.join(MEMES_FOLDER, filename)
    await file.download_to_drive(save_path)

    MEMES_LIST.append(filename)

    await update.message.reply_text("–ú–µ–º —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ üòä")

async def lock_mem_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global ALLOW_USER_ADD
    user = update.effective_user
    if not is_admin(user.username):
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    ALLOW_USER_ADD = False
    await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–º–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

async def unlock_mem_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global ALLOW_USER_ADD
    user = update.effective_user
    if not is_admin(user.username):
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    ALLOW_USER_ADD = True
    await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–º–æ–≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –¥–ª—è –≤—Å–µ—Ö.")

# --- –•–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ –≤ –≥—Ä—É–ø–ø–µ/–±–µ—Å–µ–¥–µ ---
async def group_command_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if text.startswith('/random_meme'):
        await random_meme(update, context)
    elif text.startswith('/meme_of_the_day'):
        await meme_of_the_day(update, context)

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
import asyncio
import nest_asyncio

async def main():
    load_config()
    load_memes_list()

    application = ApplicationBuilder().token(CONFIG['token']).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help))
    application.add_handler(CommandHandler("meme_count", meme_count))
    application.add_handler(CommandHandler("random_meme", random_meme))
    application.add_handler(CommandHandler("meme_of_the_day", meme_of_the_day))
    application.add_handler(CommandHandler("lock_mem_add", lock_mem_add))
    application.add_handler(CommandHandler("unlock_mem_add", unlock_mem_add))

    # –í –≥—Ä—É–ø–ø–∞—Ö ‚Äî —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–µ–º–∞ –∏ –º–µ–º –¥–Ω—è
    application.add_handler(MessageHandler(filters.PHOTO & filters.ChatType.PRIVATE, add_meme))

    await application.initialize()
    await application.start()
    await application.updater.start_polling()
    print("Bot is running")

    # –ñ–¥—ë–º Ctrl+C (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å—Ä–µ–¥)
    try:
        while True:
            await asyncio.sleep(3600)
    except (KeyboardInterrupt, SystemExit):
        print("Stopping bot...")

    await application.updater.stop_polling()
    await application.stop()
    await application.shutdown()

if __name__ == '__main__':
    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(main())